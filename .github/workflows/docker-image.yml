name: docker-image

on:
    workflow_call:
        inputs:
            dockerRepo:
              required: true
              type: string
            projectName:
              required: true
              type: string
jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: set variables
        run: |
          shortSha=$(git rev-parse --short ${{ github.sha }})
          echo "SHORT_SHA=$shortSha" >> $GITHUB_ENV
          echo "dockerRepo=${{ inputs.dockerRepo }}" >> $GITHUB_ENV
          echo "projectName=${{ inputs.projectName }}" >> $GITHUB_ENV
    
      - name: versioning
        shell: pwsh
        run: |

          #Get settings file
          $timestamp = Get-Date -Format o | ForEach-Object { $_ -replace ":", "." }
          $settingsfile = get-childitem -Filter 'settings.json' -Recurse -File | Select-Object -First 1 | %{$_.FullName}
          $json = (Get-Content $settingsfile -Raw) | ConvertFrom-Json

          $dockerRepo = $env:dockerRepo
          $projectName = $env:projectName
          $short_hash = $env:SHORT_SHA
          $hash = $env:GITHUB_WORKFLOW_SHA
          $branchFull = $env:GITHUB_REF
          $branch = $env:GITHUB_REF_NAME
          $buildId = $env:GITHUB_RUN_NUMBER
          $repo = $env:GITHUB_REPOSITORY
          $repoOwner = $env:GITHUB_REPOSITORY_OWNER
          $buildReason = $env:GITHUB_EVENT_NAME
          $workspaceDir = $env:GITHUB_WORKSPACE
          
          $publishDir = $workspaceDir + '/publish'
          New-Item -Path $workspaceDir -Name "publish" -ItemType "Directory"

          $branch_name = $branch.substring($branch.LastIndexOf('/') + 1)

          Write-Host "Timestamp: $timestamp"
          Write-Host "BranchFull: $branchFull"
          Write-Host "Branch: $branch"
          Write-Host "Branch Name: $branch_name"
          Write-Host "Build ID: $buildId"
          Write-Host "SHA: $hash"
          Write-Host "Short SHA: $short_hash"
          Write-Host "Build Reason: $buildReason"
          Write-Host "Repo: $repo"
          Write-Host "Repo Owner: $repoOwner"
          Write-Host "Docker Repo: $dockerRepo"
          Write-Host "Project Name: $projectName"
          Write-Host "Workspace Dir: $workspaceDir"
          Write-Host "Publish Dir: $publishDir"
        
          $buildDockerImage = "true"
          $dockerTag = ""
          $dockerLatestTag = ""

          if ($buildReason -eq 'pull_request') {
              write-host "Source Branch: pull request"
              $versionSuffix = ""
              $branchType = 'pr'
              $build_config = 'Release'
              $buildDockerImage = "false"
          } elseif ($branch -eq 'main') {
              write-host "Source Branch: main"
              $versionSuffix = ""
              $branchType = 'main'
              $build_config = 'Release'
              $dockerTag = "prod-" + $buildId
              $dockerLatestTag = "prod-latest"
          } elseif ($branch -eq 'develop') {
              write-host "Source Branch: develop"
              $versionSuffix = "beta"
              $branchType = 'develop'
              $build_config = 'Release'
              $dockerTag = "dev-" + $buildId
              $dockerLatestTag = "dev-latest"
          } elseif ($branch.StartsWith('feature/')) {
              write-host "Source Branch: feature"
              $branch_name = $branch.replace('feature/','')
              $versionSuffix = "alpha-" + $branch_name
              $branchType = 'feature-' + $branch_name
              $build_config = 'Debug'
              $buildDockerImage = "false"
          } elseif ($branch.StartsWith('hotfix/')) {
            write-host "Source Branch: hotfix"
              $versionSuffix = "hotfix"
              $branchType = 'hotfix-' + $branch_name
              $build_config = 'Release'
              $dockerTag = "release-" + $buildId
              $dockerLatestTag = "release-latest"
          } elseif ($branch.StartsWith('release/')) {
              write-host "Source Branch: release"
              $versionSuffix = "rc"
              $branchType = 'release-' + $branch_name
              $build_config = 'Release'
              $dockerTag = "release-" + $buildId
              $dockerLatestTag = "release-latest"
          } elseif ($branch.StartsWith('support/')) {
              write-host "Source Branch: support"
              $versionSuffix = ""
              $branchType = 'support-' + $branch_name
              $build_config = 'Release'
              $dockerTag = "prod-" + $buildId
              $dockerLatestTag = "prod-latest"
          } else {
              throw "Unrecognised Branch: " + $branch
          }

          $fullVersionSuffix = $short_hash
          
          if ($versionSuffix.Length -gt 0) {
              $fullVersionSuffix = $versionSuffix + '-' + $short_hash
          }

          $assemblyVersion = 'AssemblyVersion("' + $json.Version + '")'
          $assemblyFileVersion = 'AssemblyFileVersion("' + $json.Version + '")'
          $version = $json.Version + '-' + $fullVersionSuffix
          $assemblyInformationalVersion = 'AssemblyInformationalVersion("' + $version + '")'
          write-host $assemblyVersion
          write-host $assemblyFileVersion
          write-host $assemblyInformationalVersion
          write-host "Config:  $build_config"
          write-host "buildDockerImage:  $buildDockerImage"
          write-host "dockerRepo:  $dockerRepo"
          write-host "dockerTag:  $dockerTag"
          write-host "dockerLatestTag:  $dockerLatestTag"

          #Update csproj version
          $versionPattern = '<Version>.*</Version>'
          $prefixPattern = '<VersionPrefix>.*</VersionPrefix>'
          $suffixPattern = '<VersionSuffix>.*</VersionSuffix>'
          $newPrefix = '<VersionPrefix>' + $json.Version + '</VersionPrefix>'
          $newSuffix = '<VersionSuffix>' + $fullVersionSuffix + '</VersionSuffix>'
          $files = get-childitem -Filter '*.csproj' -Recurse -File | Select-Object
          $errorMessage = ''
          foreach ($file in $files) {
              Write-Host "Updating Version: " $file.FullName
              
              $matches = select-string -path $file.FullName -Pattern $versionPattern
              if ($matches -ne $null) {
                  $errorMessage +=  "Please use VersionPrefix and VersionSuffix instead of Version in :" + $file.FullName + "`n"
              }
              $matches = select-string -path $file.FullName -Pattern $prefixPattern
              if ($matches -eq $null) {
                  $errorMessage +=  "Could not locate VersionPrefix in :" + $file.FullName + "`n"
              }
              $matches = select-string -path $file.FullName -Pattern $suffixPattern
              if ($matches -eq $null) {
                  $errorMessage +=  "Could not locate VersionSuffix in :" + $file.FullName + "`n"
              }
              #Update Prefix
              (Get-Content $file.FullName) | % ` { $_-replace $prefixPattern, $newPrefix } |  Set-Content $file.FullName
              #Update Suffix
              (Get-Content $file.FullName) | % ` { $_-replace $suffixPattern, $newSuffix } |  Set-Content $file.FullName
          }

          # Write variables
          echo "BuildConfiguration=$build_config" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "BuildDockerImage=$buildDockerImage" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "DockerTag=$dockerTag" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "DockerLatestTag=$dockerLatestTag" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "publishDir=$publishDir" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          echo "branch_name=$branch_name" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "buildId=$buildId" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "branchType=$branchType" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "version=$version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "timestamp=$timestamp" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: NuGet Configure sources
        run: |
          dotnet nuget add source --username JimIBrown --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/JimIBrown/index.json"
      
      - name: Install dependencies
        working-directory: ./src
        run: dotnet restore

      - name: Build
        working-directory: ./src
        run: |
            echo "BuildConfiguration: $BuildConfiguration"
            dotnet build --configuration $BuildConfiguration --no-restore

      - name: Test with the dotnet CLI
        working-directory: ./src
        run: dotnet test --no-build

      - name: Publish
        working-directory: ./src
        run: dotnet publish **/${{ env.projectName }}.csproj --configuration $BuildConfiguration -p:PublishDir=${{ env.publishDir }} --self-contained false --no-restore

      - name: version-file
        shell: pwsh
        run: |
          #Write Version File

          $jsonBase = @{}
          $jsonBase.Add("build-id", $env:buildId)
          $jsonBase.Add("version", $env:version)
          $jsonBase.Add("repo", $env:GITHUB_REPOSITORY)
          $jsonBase.Add("commit-hash", $env:GITHUB_WORKFLOW_SHA)
          $jsonBase.Add("short-hash", $env:SHORT_SHA)
          $jsonBase.Add("branch", $env:GITHUB_REF_NAME)
          $jsonBase.Add("branch-name", $env:branch_name)
          $jsonBase.Add("branch-type", $env:branchType)
          $jsonBase.Add("build-config", $env:BuildConfiguration)
          $jsonBase.Add("build-timestamp", $env:timestamp)
          $jsonBase.Add("build-docker-image", $env:BuildDockerImage)

          if ($env:BuildDockerImage -eq "true") {
              $jsonBase.Add("docker-repo", $env:dockerRepo)
              $jsonBase.Add("docker-tag", $env:DockerTag)
              $jsonBase.Add("docker-latest-tag", $env:DockerLatestTag)
          }

          $versionFile = $env:publishDir + '/Version.json'
          $jsonBase | ConvertTo-Json
          $jsonBase | ConvertTo-Json | Out-File $versionFile

      - name: Docker Build and Push
        if: ${{ env.BuildDockerImage == 'true' }}
        run: |
          echo "Replace this step with docker build and push"

      - name: Publish-Artifact
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: ${{ env.publishDir }}
            
